/*
 * AVACloud API 1.16.0
 *
 * AVACloud API specification
 *
 * API version: 1.16.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package avaclient

import (
	"encoding/json"
	"fmt"
	"path/filepath"
	"reflect"
	"runtime"
	"testing"
)

func TestMarshall(t *testing.T) {
	avaProject := ProjectDto{
		ServiceSpecifications: []ServiceSpecificationDto{
			{
				Elements: []IElementDtoHolder{
					{
						PositionDto{
							ElementTypeDiscriminator: "Position",
							UnitPriceOverride:        2,
							Quantity:                 5,
							ShortText:                "test text",
						},
					},
				},
			},
		},
	}

	jsonBytes, err := json.MarshalIndent(avaProject, "", "  ")
	ok(t, err)

	expJson := `{
  "id": "",
  "priceAccuracy": 0,
  "forceStrictTotals": false,
  "priceRoundingMode": "",
  "projectInformation": {
    "buyer": {
      "id": "",
      "isInEuropeanEconomicArea": false
    },
    "site": {
      "id": "",
      "isInEuropeanEconomicArea": false
    },
    "itemNumberSchema": {
      "totalLength": 0
    },
    "bidderCommentAllowed": false,
    "sideOffersAllowed": false,
    "awardType": "",
    "specialAwardKind": ""
  },
  "serviceSpecifications": [
    {
      "id": "",
      "projectHourlyWage": 0,
      "projectTaxRate": 0,
      "projectItemNumberSchema": {
        "totalLength": 0
      },
      "elements": [
        {
          "id": "",
          "elementTypeDiscriminator": "Position",
          "unitPrice": 0,
          "unitPriceOverride": 2,
          "quantity": 5,
          "labourComponents": {
            "price": 0,
            "hourlyWage": 0,
            "useOwnHourlyWage": false,
            "totalTime": 0
          },
          "comissionStatus": "",
          "complemented": false,
          "amountToBeEnteredByBidder": false,
          "priceCompositionRequired": false,
          "useDifferentTaxRate": false,
          "taxRate": 0,
          "itemNumber": {
            "id": "",
            "isSchemaCompliant": false,
            "itemNumberSchema": {
              "totalLength": 0
            },
            "isLot": false
          },
          "deductionFactor": 0,
          "totalPrice": 0,
          "totalPriceGross": 0,
          "totalPriceGrossDeducted": 0,
          "deductedPrice": 0,
          "positionType": "",
          "priceType": "",
          "serviceType": "",
          "productData": {
            "id": "",
            "vendor": {
              "id": "",
              "isInEuropeanEconomicArea": false
            }
          },
          "shortText": "test text",
          "additionType": "",
          "commerceProperties": {},
          "isLumpSum": false,
          "standardizedDescription": {
            "standardReferenceType": "",
            "stlbReference": {
              "versionDate": "0001-01-01T00:00:00Z"
            }
          }
        }
      ],
      "containsDuplicateItemNumbers": false,
      "containsDuplicateElementIds": false,
      "ignoreDuplicateItemNumbers": false,
      "ignoreDuplicateElementIds": false,
      "ignoreChildPriceUpdates": false,
      "deductedPrice": 0,
      "deductionFactor": 0,
      "totalPrice": 0,
      "totalPriceGross": 0,
      "totalPriceGrossDeducted": 0,
      "priceType": "",
      "bidder": {
        "id": "",
        "isInEuropeanEconomicArea": false
      },
      "projectInformation": {
        "buyer": {
          "id": "",
          "isInEuropeanEconomicArea": false
        },
        "site": {
          "id": "",
          "isInEuropeanEconomicArea": false
        },
        "itemNumberSchema": {
          "totalLength": 0
        },
        "bidderCommentAllowed": false,
        "sideOffersAllowed": false,
        "awardType": "",
        "specialAwardKind": ""
      },
      "exchangePhase": "",
      "origin": "",
      "creationDate": "0001-01-01T00:00:00Z",
      "offerByDate": "0001-01-01T00:00:00Z",
      "decisionDate": "0001-01-01T00:00:00Z",
      "priceInformation": {
        "id": "",
        "hourlyWage": 0,
        "deductionFactor": 0,
        "flatSum": 0,
        "taxRate": 0
      },
      "plannedExecutionStart": "0001-01-01T00:00:00Z",
      "plannedExecutionEnd": "0001-01-01T00:00:00Z",
      "contractDate": "0001-01-01T00:00:00Z",
      "warrantyDuration": {
        "duration": 0,
        "unit": ""
      },
      "warrantyEnd": "0001-01-01T00:00:00Z",
      "approvalDate": "0001-01-01T00:00:00Z"
    }
  ]
}`
	equals(t, expJson, string(jsonBytes))
}

func TestUnMarshall(t *testing.T) {
	jsonStr := `{
  "id": "",
  "priceAccuracy": 0,
  "forceStrictTotals": false,
  "priceRoundingMode": "",
  "projectInformation": {
    "buyer": {
      "id": "",
      "isInEuropeanEconomicArea": false
    },
    "site": {
      "id": "",
      "isInEuropeanEconomicArea": false
    },
    "itemNumberSchema": {
      "totalLength": 0
    },
    "bidderCommentAllowed": false,
    "sideOffersAllowed": false,
    "awardType": "",
    "specialAwardKind": ""
  },
  "serviceSpecifications": [
    {
      "id": "",
      "projectHourlyWage": 0,
      "projectTaxRate": 0,
      "projectItemNumberSchema": {
        "totalLength": 0
      },
      "elements": [
        {
          "id": "",
          "elementTypeDiscriminator": "Position",
          "unitPrice": 0,
          "unitPriceOverride": 2,
          "quantity": 5,
          "labourComponents": {
            "price": 0,
            "hourlyWage": 0,
            "useOwnHourlyWage": false,
            "totalTime": 0
          },
          "comissionStatus": "",
          "complemented": false,
          "amountToBeEnteredByBidder": false,
          "priceCompositionRequired": false,
          "useDifferentTaxRate": false,
          "taxRate": 0,
          "itemNumber": {
            "id": "",
            "isSchemaCompliant": false,
            "itemNumberSchema": {
              "totalLength": 0
            },
            "isLot": false
          },
          "deductionFactor": 0,
          "totalPrice": 0,
          "totalPriceGross": 0,
          "totalPriceGrossDeducted": 0,
          "deductedPrice": 0,
          "positionType": "",
          "priceType": "",
          "serviceType": "",
          "productData": {
            "id": "",
            "vendor": {
              "id": "",
              "isInEuropeanEconomicArea": false
            }
          },
          "shortText": "test text",
          "additionType": "",
          "commerceProperties": {},
          "isLumpSum": false,
          "standardizedDescription": {
            "standardReferenceType": "",
            "stlbReference": {
              "versionDate": "0001-01-01T00:00:00Z"
            }
          }
        }
      ],
      "containsDuplicateItemNumbers": false,
      "containsDuplicateElementIds": false,
      "ignoreDuplicateItemNumbers": false,
      "ignoreDuplicateElementIds": false,
      "ignoreChildPriceUpdates": false,
      "deductedPrice": 0,
      "deductionFactor": 0,
      "totalPrice": 0,
      "totalPriceGross": 0,
      "totalPriceGrossDeducted": 0,
      "priceType": "",
      "bidder": {
        "id": "",
        "isInEuropeanEconomicArea": false
      },
      "projectInformation": {
        "buyer": {
          "id": "",
          "isInEuropeanEconomicArea": false
        },
        "site": {
          "id": "",
          "isInEuropeanEconomicArea": false
        },
        "itemNumberSchema": {
          "totalLength": 0
        },
        "bidderCommentAllowed": false,
        "sideOffersAllowed": false,
        "awardType": "",
        "specialAwardKind": ""
      },
      "exchangePhase": "",
      "origin": "",
      "creationDate": "0001-01-01T00:00:00Z",
      "offerByDate": "0001-01-01T00:00:00Z",
      "decisionDate": "0001-01-01T00:00:00Z",
      "priceInformation": {
        "id": "",
        "hourlyWage": 0,
        "deductionFactor": 0,
        "flatSum": 0,
        "taxRate": 0
      },
      "plannedExecutionStart": "0001-01-01T00:00:00Z",
      "plannedExecutionEnd": "0001-01-01T00:00:00Z",
      "contractDate": "0001-01-01T00:00:00Z",
      "warrantyDuration": {
        "duration": 0,
        "unit": ""
      },
      "warrantyEnd": "0001-01-01T00:00:00Z",
      "approvalDate": "0001-01-01T00:00:00Z"
    }
  ]
}`

	var decodedProject ProjectDto
	err := json.Unmarshal([]byte(jsonStr), &decodedProject)
	ok(t, err)

	avaProject := ProjectDto{
		ServiceSpecifications: []ServiceSpecificationDto{
			{
				Elements: []IElementDtoHolder{
					{
						&PositionDto{
							ElementTypeDiscriminator: "Position",
							UnitPriceOverride:        2,
							Quantity:                 5,
							ShortText:                "test text",
						},
					},
				},
			},
		},
	}

	equals(t, avaProject, decodedProject)
}

// assert fails the test if the condition is false.
func assert(tb testing.TB, condition bool, msg string, v ...interface{}) {
	if !condition {
		_, file, line, _ := runtime.Caller(1)
		fmt.Printf("\033[31m%s:%d: "+msg+"\033[39m\n\n", append([]interface{}{filepath.Base(file), line}, v...)...)
		tb.FailNow()
	}
}

// ok fails the test if an err is not nil.
func ok(tb testing.TB, err error) {
	if err != nil {
		_, file, line, _ := runtime.Caller(1)
		fmt.Printf("\033[31m%s:%d: unexpected error: %s\033[39m\n\n", filepath.Base(file), line, err.Error())
		tb.FailNow()
	}
}

// equals fails the test if exp is not equal to act.
func equals(tb testing.TB, exp, act interface{}) {
	if !reflect.DeepEqual(exp, act) {
		_, file, line, _ := runtime.Caller(1)
		fmt.Printf("\033[31m%s:%d:\n\n\texp: %#v\n\n\tgot: %#v\033[39m\n\n", filepath.Base(file), line, exp, act)
		tb.FailNow()
	}
}
